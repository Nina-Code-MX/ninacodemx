---
name: Auto Deploy
run-name: Auto Deploy by ${{ github.actor }}
on:
  push:
    branches:
      - main

jobs:
  retrieve-public-ip:
    name: Get Public IP
    runs-on: ubuntu-latest
    steps:
      - id: retrieve
        name: Get Public IP
        run: |
          PUBLIC_IP=$(curl -s https://api.ipify.org)
          echo "PUBLIC_IP=${PUBLIC_IP}" >> "${GITHUB_OUTPUT}"
    outputs:
      PUBLIC_IP: ${{ steps.retrieve.outputs.PUBLIC_IP }}
  
  add-ip-to-sg:
    runs-on: ubuntu-latest
    needs: [retrieve-public-ip]
    env:
      PUBLIC_IP: ${{ needs.retrieve-public-ip.outputs.PUBLIC_IP }}
    steps:
      - id: add-ip-to-sg
        name: Add IP to Security Group
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Add IP to Security Group
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port ${{ secrets.AWS_EC2_PORT }} \
            --cidr ${{ env.PUBLIC_IP }}/32

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [add-ip-to-sg]
    steps:
      - name: Deploy
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.AWS_EC2_HOST }}
          username: ${{ secrets.AWS_EC2_USERNAME }}
          key: ${{ secrets.AWS_EC2_KEY }}
          port: ${{ secrets.AWS_EC2_PORT }}
          script: |
            cd /var/www/ninacode.mx
            eval $(ssh-agent -s)
            ssh-add ~/.ssh/ninacodemx_deploy
            git restore .
            git pull origin main
            php artisan route:clear
            php artisan view:clear
            php artisan config:clear
            php artisan migrate --force
            composer install --no-dev
            npm install
            npm run build

  remove-ip-from-sg:
    name: Remove IP from Security Group
    if: always()
    runs-on: ubuntu-latest
    needs: [retrieve-public-ip, deploy]
    env:
      PUBLIC_IP: ${{ needs.retrieve-public-ip.outputs.PUBLIC_IP }}
    steps:
      - id: remove-ip-from-sg
        name: Remove IP from Security Group
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Remove IP from Security Group
        run: |
          aws ec2 revoke-security-group-ingress \
            --group-id ${{ secrets.AWS_SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port ${{ secrets.AWS_EC2_PORT }} \
            --cidr ${{ env.PUBLIC_IP }}/32
